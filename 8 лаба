#include <stdio.h>
#include <locale.h>
#include <math.h>   // for sqrt in prime-checking


void fillFile(const char *filename);
void readFile(const char *filename);
void findMax(const char *filename);
void findMin(const char *filename);
void swapElements(const char *filename);
void sortNegativeDescending(const char *filename);
void countPrimeNumbers(const char *filename);
void invertSign(const char *filename);

int  isPrime(int num);
void readArrayFromFile(const char *filename, int *array, int count);
void writeArrayToFile(const char *filename, int *array, int count);
int  getFileSizeInIntegers(FILE *file);

int main(int argv, char* argc[]) {
    setlocale(LC_ALL, "russian");

    char ccc;
    int choice;
    char* filename = argc[1];

    do {


        puts("Что вы желаете сделать?:");
        puts("1. Заполнить файл целыми числами");
        puts("2. Прочитать данные из файла");
        puts("3. Найти максимальный элемент");
        puts("4. Найти минимальный элемент");
        puts("5. Поменять местами элементы в файле");
        puts("6. Отсортировать все отрицательные элементы по убыванию");
        puts("7. Посчитать количество простых чисел в файле");
        puts("8. Заменить знак каждого числа на противоположный");

        scanf("%d", &choice);

        switch(choice) {
            case 1: fillFile(filename); break;
            case 2: readFile(filename); break;
            case 3: findMax(filename); break;
            case 4: findMin(filename); break;
            case 5: swapElements(filename); break;
            case 6: sortNegativeDescending(filename); break;
            case 7: countPrimeNumbers(filename); break;
            case 8: invertSign(filename); break;
            default:
                puts("Неверный ввод...");
        }

        puts("\nContinue? 1 to yes:\n");
        rewind(stdin);
        ccc = getchar();
    } while (ccc == '1');

    return 0;
}

// ---------------------------------------------
// 1) Заполнить файл целыми числами
// ---------------------------------------------
void fillFile(const char *filename) {
    FILE *file = fopen(filename, "wb");
    if (file == NULL) {
        perror("filename");
        return;
    }

    int count;
    puts("Введите кол-во чисел: ");
    scanf("%d", &count);

    if(count == 1) {
        printf("Введите %d число:\n", count);
    } else if(count == 2 || count == 3 || count == 4) {
        printf("Введите %d числа:\n", count);
    } else {
        printf("Введите %d чисел:\n", count);
    }

    for (int i = 0; i < count; i++) {
        int num;
        scanf("%d", &num);
        fwrite(&num, sizeof(num), 1, file);
    }

    fclose(file);
    puts("Данные успешно занесены!");
}

// ---------------------------------------------
// 2) Прочитать данные из файла
// ---------------------------------------------
void readFile(const char *filename) {
    int array[100];
    int count;
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    fread(array, sizeof(int), count, file);
    fclose(file);

    puts("Считанные данные:");
    for (int i = 0; i < count; i++) {
        printf("%d ", array[i]);
    }
    puts("");
}

// ---------------------------------------------
// 3) Найти максимальный элемент
// ---------------------------------------------
void findMax(const char *filename) {
    int count;
    int array[100];

    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    fread(array, sizeof(int), count, file);
    fclose(file);

    int max = array[0];
    for (int i = 1; i < count; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    printf("Максимальный элемент в файле: %d\n", max);
}

// ---------------------------------------------
// 4) Найти минимальный элемент
// ---------------------------------------------
void findMin(const char *filename) {
    int count;
    int array[100];

    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    fread(array, sizeof(int), count, file);
    fclose(file);

    int min = array[0];
    for (int i = 1; i < count; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    printf("Минимальный элемент в файле: %d\n", min);
}

// ---------------------------------------------
// 5) Поменять местами два элемента в файле
// ---------------------------------------------
void swapElements(const char *filename) {
    int count;
    int index1, index2, num1, num2;

    FILE *file = fopen(filename, "rb+");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    puts("Введите индексы элементов, которые хотите поменять местами:");
    scanf("%d %d", &index1, &index2);
    // Индексы с 1 в интерфейсе => нужно -1 для обращения
    index1--;
    index2--;

    fseek(file, index1 * sizeof(int), SEEK_SET);
    fread(&num1, sizeof(int), 1, file);

    fseek(file, index2 * sizeof(int), SEEK_SET);
    fread(&num2, sizeof(int), 1, file);

    fseek(file, index1 * sizeof(int), SEEK_SET);
    fwrite(&num2, sizeof(int), 1, file);

    fseek(file, index2 * sizeof(int), SEEK_SET);
    fwrite(&num1, sizeof(int), 1, file);

    puts("Элементы успешно поменяны местами!");
    fclose(file);
}

// ---------------------------------------------
// 6) Отсортировать все отрицательные элементы по убыванию
// ---------------------------------------------
void sortNegativeDescending(const char *filename) {
    FILE *file = fopen(filename, "rb+");
    if (file == NULL) {
        perror("filename");
        return;
    }

    // Определяем, сколько целых чисел лежит в файле:
    int size = getFileSizeInIntegers(file);

    // Пузырьковая сортировка (только среди отрицательных) по убыванию
    int sorted;
    do {
        sorted = 1;
        for(int i = 0; i < size - 1; i++) {
            int num1, num2;

            fseek(file, i * sizeof(int), SEEK_SET);
            fread(&num1, sizeof(int), 1, file);

            fseek(file, (i + 1) * sizeof(int), SEEK_SET);
            fread(&num2, sizeof(int), 1, file);

            // Сортируем только между отрицательными
            if(num1 < 0 || num2 < 0) {
                // Убывание => если num1 < num2, меняем местами
                if(num1 < num2) {
                    fseek(file, i * sizeof(int), SEEK_SET);
                    fwrite(&num2, sizeof(int), 1, file);

                    fseek(file, (i + 1) * sizeof(int), SEEK_SET);
                    fwrite(&num1, sizeof(int), 1, file);

                    sorted = 0;
                }
            }
        }
    } while(!sorted);

    fclose(file);

    // Здесь выводим сообщение, но логика "if (sorted) ... else ..." в оригинале не совсем однозначна.
    // В классической пузырьковой сортировке "sorted=1" лишь если мы не сделали ни одного обмена.
    // Если в файле вообще нет отрицательных, то ни один обмен не происходит => sorted=1 => ...
    // Для совместимости с оригинальным кодом:
    if(sorted){
        puts("Сортировка выполнена успешно");
    } else {
        puts("В файле отсутствуют отрицательные значения");
    }
}

// ---------------------------------------------
// 7) Посчитать количество простых чисел
// ---------------------------------------------
void countPrimeNumbers(const char *filename) {
    int array[100];
    int count;

    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    fread(array, sizeof(int), count, file);
    fclose(file);

    // Подсчёт простых чисел
    int primeCount = 0;
    for(int i = 0; i < count; i++) {
        if(isPrime(array[i])) {
            primeCount++;
        }
    }

    printf("Количество простых чисел в файле: %d\n", primeCount);
}

// ---------------------------------------------
// 8) Заменить знак каждого числа на противоположный
// ---------------------------------------------
void invertSign(const char *filename) {
    int array[100];
    int count;

    FILE *file = fopen(filename, "rb+");
    if (file == NULL) {
        perror("filename");
        return;
    }

    puts("Введите кол-во чисел для чтения: ");
    scanf("%d", &count);

    fread(array, sizeof(int), count, file);

    for(int i = 0; i < count; i++) {
        array[i] = -array[i];
    }

    fseek(file, 0, SEEK_SET);
    fwrite(array, sizeof(int), count, file);
    fclose(file);

    puts("Числа успешно заменены на противоположные");
}

// ---------------------------------------------
// Helper Functions
// ---------------------------------------------

// Проверка, является ли число простым
int isPrime(int num) {
    if(num < 2) return 0;
    if(num == 2) return 1;
    if(num % 2 == 0) return 0;
    for(int i = 3; i <= (int)sqrt(num); i += 2) {
        if(num % i == 0) {
            return 0;
        }
    }
    return 1;
}

// Универсальная функция чтения count элементов из файла в массив
void readArrayFromFile(const char *filename, int *array, int count) {
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("filename");
        return;
    }
    fread(array, sizeof(int), count, file);
    fclose(file);
}

// Универсальная функция записи count элементов в файл
void writeArrayToFile(const char *filename, int *array, int count) {
    FILE *file = fopen(filename, "wb");
    if (file == NULL) {
        perror("filename");
        return;
    }
    fwrite(array, sizeof(int), count, file);
    fclose(file);
}

// Узнаём, сколько целых чисел лежит в открытом файле (rb, rb+ и т.п.)
int getFileSizeInIntegers(FILE *file) {
    fseek(file, 0, SEEK_END);
    long fileSizeBytes = ftell(file);
    fseek(file, 0, SEEK_SET);
    return (int)(fileSizeBytes / sizeof(int));
}
